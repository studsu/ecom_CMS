"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import json
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jy2m4m5_*q+tc0#e%+sn791+04@biau^7@=z7ai*-w-dzqs5jr'

# SECURITY WARNING: don't run with debug turned on in production!

# --------- Site-level customization ----------
# SITE_NAME and THEME are now managed through the database via SiteSettings model
DEBUG = True
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-key-change-in-prod")
ALLOWED_HOSTS = ["*"]



# ---- Plugin discovery: read plugins/*/plugin.json if present
def discover_plugins(base_dir: Path):
    apps = []
    plugins_dir = base_dir / "plugins"
    if not plugins_dir.exists():
        return apps
    for child in plugins_dir.iterdir():
        if child.is_dir():
            meta = child / "plugin.json"
            if meta.exists():
                try:
                    data = json.loads(meta.read_text())
                    app_name = data.get("app_name")
                    if app_name:
                        apps.append(app_name)
                except Exception:
                    pass
    return apps

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "core",
    "users",
    "catalog",
    "orders",   # remove if you don't want it now
    "wishlist",  # Wishlist functionality
    "updates",   # Git-based version checking
]

# Add discovered plugin apps
INSTALLED_APPS += discover_plugins(BASE_DIR)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'core.middleware.DynamicStaticThemeMiddleware',  # Dynamic static files for themes
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# Theme-aware template directory: themes/<THEME>
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # Managed by custom template loader
        "OPTIONS": {
            "loaders": [
                "core.template_loaders.DynamicThemeLoader",  # Custom dynamic theme loader
                "django.template.loaders.app_directories.Loader",  # For app templates
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # custom: inject SITE_NAME and THEME
                "core.context_processors.site_context",
            ],
        },
    },
]



WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static_shared",           # shared
    BASE_DIR / "themes" / "glam" / "static",  # Default theme static, overridden by middleware
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (User uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = "users.User"

# Shopping Cart Settings
CART_SESSION_ID = 'cart'

LOGIN_URL = "/users/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# CSRF Settings for development
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000', 'http://localhost:8000']

# GitHub Integration (for auto-updates)
# Optional: Add your GitHub token for higher API rate limits
# GITHUB_TOKEN = 'your_github_token_here'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
